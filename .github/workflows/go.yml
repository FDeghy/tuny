# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    permissions:
      contents: write
    strategy:
      matrix:
        # Include amd64 on all platforms.
        goos: [windows, linux]
        goarch: [amd64]
        gotoolchain: [""]
        patch-assetname: [""]

      fail-fast: false

    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}
    steps:
    - uses: actions/checkout@v4

    - name: Show workflow information
      run: |
        _NAME=${{ matrix.patch-assetname }}
        [ -n "$_NAME" ] || _NAME=$(jq ".[\"$GOOS-$GOARCH$GOARM$GOMIPS\"].friendlyName" -r < .github/build/friendly-filenames.json)
        echo "GOOS: $GOOS, GOARCH: $GOARCH, GOARM: $GOARM, GOMIPS: $GOMIPS, RELEASE_NAME: $_NAME"
        echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.gotoolchain || '1.22.5' }}
        check-latest: true

    - name: Install dependencies
      run: |
        mkdir -p build_assets
        go get .
        go mod download
    
    - name: Build
      run: |
        go build -v ./...
        find . -maxdepth 1 -type f -regex './\(Tuny\|tuny\)\(\|.exe\)' -exec mv {} ./build_assets/ \;

    - name: Create ZIP archive
      if: github.event_name == 'release'
      shell: bash
      run: |
        pushd build_assets || exit 1
        touch -mt $(date +%Y01010000) *
        zip -9vr ../Tuny-${{ env.ASSET_NAME }}.zip .
        popd || exit 1
        FILE=./Tuny-${{ env.ASSET_NAME }}.zip
        DGST=$FILE.dgst
        for METHOD in {"md5","sha1","sha256","sha512"}
        do
          openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
        done

    - name: Change the name
      run: |
        mv build_assets Tuny-${{ env.ASSET_NAME }}
    
    - name: Upload files to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Tuny-${{ env.ASSET_NAME }}
        path: |
          ./Tuny-${{ env.ASSET_NAME }}/*

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      if: github.event_name == 'release'
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./Tuny-${{ env.ASSET_NAME }}.zip*
        tag: ${{ github.ref }}
        file_glob: true
